{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "05d86565",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-02-08 16:46:48.781 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /opt/anaconda3/lib/python3.11/site-packages/ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def simulate_market(demand_growth, inflation_rate, supply5_str, supply4_str):\n",
    "    T = 11  # Simulate from 2024 to 2034.\n",
    "    years = np.arange(2024, 2024 + T)\n",
    "    \n",
    "    # Convert inputs and set parameters\n",
    "    demand_growth = float(demand_growth)\n",
    "    inflation_rate = float(inflation_rate)\n",
    "    inflation = inflation_rate\n",
    "    high_demand = (demand_growth > 0.10)\n",
    "    \n",
    "    # Initial conditions\n",
    "    K1_0 = 7550.0; K2_0 = 6124.0; K3_0 = 3266.0\n",
    "    ADR1_0 = 1324.0; ADR2_0 = 1137.0; ADR3_0 = 437.0\n",
    "    target_occ = {'group1': 0.65, 'group2': 0.40, 'group3': 0.65}\n",
    "    D0 = (K1_0 * target_occ['group1'] + K2_0 * target_occ['group2'] + K3_0 * target_occ['group3']) * 365\n",
    "    \n",
    "    try:\n",
    "        supply5_list = [float(x.strip()) for x in supply5_str.split(',')]\n",
    "        supply4_list = [float(x.strip()) for x in supply4_str.split(',')]\n",
    "    except Exception as e:\n",
    "        st.error(\"Error parsing supply strings. Please enter comma-separated numbers.\")\n",
    "        return None\n",
    "\n",
    "    new_supply_5 = np.array(supply5_list)\n",
    "    new_supply_4 = np.array(supply4_list)\n",
    "    if len(new_supply_5) < T:\n",
    "        new_supply_5 = np.concatenate([new_supply_5, np.zeros(T - len(new_supply_5))])\n",
    "    else:\n",
    "        new_supply_5 = new_supply_5[:T]\n",
    "    if len(new_supply_4) < T:\n",
    "        new_supply_4 = np.concatenate([new_supply_4, np.zeros(T - len(new_supply_4))])\n",
    "    else:\n",
    "        new_supply_4 = new_supply_4[:T]\n",
    "\n",
    "    # Initialize state variables\n",
    "    K1 = np.zeros(T); K2 = np.zeros(T); K3 = np.zeros(T)\n",
    "    K1[0] = K1_0; K2[0] = K2_0; K3[0] = K3_0\n",
    "    Potential1 = np.zeros(T); Potential1[0] = K1_0\n",
    "    for t in range(1, T):\n",
    "        Potential1[t] = Potential1[t - 1] + new_supply_5[t]\n",
    "\n",
    "    ADR1_real = np.zeros(T); ADR2_real = np.zeros(T); ADR3_real = np.zeros(T)\n",
    "    ADR1_real[0] = ADR1_0; ADR2_real[0] = ADR2_0; ADR3_real[0] = ADR3_0\n",
    "    ADR1_nom = ADR1_real.copy(); ADR2_nom = ADR2_real.copy(); ADR3_nom = ADR3_real.copy()\n",
    "\n",
    "    # Demand allocation multipliers\n",
    "    M1 = 1.2; M2 = 0.8; M3 = 1.0\n",
    "    k1 = 0.30; k2 = 0.40\n",
    "    def migration_flow(occ, target_occ_val, keys_current, k):\n",
    "        shortfall = max(target_occ_val - occ, 0) / target_occ_val\n",
    "        return k * shortfall * keys_current\n",
    "\n",
    "    alpha = 0.05; delta2 = 0.06; beta = 1.0; beta2 = 0.9\n",
    "\n",
    "    for t in range(1, T):\n",
    "        K1[t] = K1[t - 1] + new_supply_5[t]\n",
    "        K2[t] = K2[t - 1] + new_supply_4[t]\n",
    "        K3[t] = K3[t - 1]\n",
    "        D_total = D0 * ((1 + demand_growth) ** t)\n",
    "        W1 = M1 * (K1[t] / ADR1_nom[t - 1])\n",
    "        W2 = M2 * (K2[t] / ADR2_nom[t - 1])\n",
    "        W3 = M3 * (K3[t] / ADR3_nom[t - 1])\n",
    "        W_sum = W1 + W2 + W3\n",
    "        D1 = D_total * (W1 / W_sum)\n",
    "        D2 = D_total * (W2 / W_sum)\n",
    "        D3 = D_total * (W3 / W_sum)\n",
    "        occ1 = min(D1 / (K1[t] * 365), 1.0)\n",
    "        occ2 = min(D2 / (K2[t] * 365), 1.0)\n",
    "        occ3 = min(D3 / (K3[t] * 365), 1.0)\n",
    "        if not high_demand:\n",
    "            m1 = migration_flow(occ1, target_occ['group1'], K1[t], k1)\n",
    "            m2 = migration_flow(occ2, target_occ['group2'], K2[t], k2)\n",
    "        else:\n",
    "            m1 = 0.0; m2 = 0.0\n",
    "        K1[t] = K1[t] - m1\n",
    "        K2[t] = K2[t] + m1 - m2\n",
    "        K3[t] = K3[t] + m2\n",
    "        if not high_demand:\n",
    "            scarcity = 1 - (K1[t] / Potential1[t])\n",
    "            ADR1_real[t] = ADR1_real[t - 1] * (1 + inflation + alpha * scarcity)\n",
    "        else:\n",
    "            ADR1_real[t] = ADR1_real[t - 1] * (1 + inflation + beta * (demand_growth - 0.10))\n",
    "        if not high_demand:\n",
    "            pressure = max(target_occ['group2'] - occ2, 0) / target_occ['group2']\n",
    "            ADR2_real[t] = ADR2_real[t - 1] * (1 + inflation) * (1 - delta2 * pressure)\n",
    "        else:\n",
    "            ADR2_real[t] = ADR2_real[t - 1] * (1 + inflation + beta2 * (demand_growth - 0.10))\n",
    "        ADR3_real[t] = ADR3_real[t - 1] * (1 + inflation)\n",
    "        ADR1_nom[t] = ADR1_real[t]\n",
    "        ADR2_nom[t] = ADR2_real[t]\n",
    "        ADR3_nom[t] = ADR3_real[t]\n",
    "\n",
    "    total_keys = K1 + K2 + K3\n",
    "    share1 = 100 * K1 / total_keys\n",
    "    share2 = 100 * K2 / total_keys\n",
    "    share3 = 100 * K3 / total_keys\n",
    "\n",
    "    # Create the charts\n",
    "    fig, ax = plt.subplots(1, 2, figsize=(14, 6))\n",
    "    ax[0].plot(years, share1, marker='o', color='#1f77b4', linewidth=2, label='Group 1 (Luxury)')\n",
    "    ax[0].plot(years, share2, marker='o', color='#ff7f0e', linewidth=2, label='Group 2 (Upper-Mid)')\n",
    "    ax[0].plot(years, share3, marker='o', color='#2ca02c', linewidth=2, label='Group 3 (Budget)')\n",
    "    ax[0].set_xlabel(\"Year\")\n",
    "    ax[0].set_ylabel(\"Market Share (%)\")\n",
    "    ax[0].set_title(\"Evolution of Market Shares\")\n",
    "    ax[0].legend()\n",
    "    ax[0].grid(True)\n",
    "\n",
    "    ax[1].plot(years, ADR1_nom, marker='o', color='#d62728', linewidth=2, label='Group 1 ADR')\n",
    "    ax[1].plot(years, ADR2_nom, marker='o', color='#9467bd', linewidth=2, label='Group 2 ADR')\n",
    "    ax[1].plot(years, ADR3_nom, marker='o', color='#8c564b', linewidth=2, label='Group 3 ADR')\n",
    "    ax[1].set_xlabel(\"Year\")\n",
    "    ax[1].set_ylabel(\"ADR (SAR, nominal)\")\n",
    "    ax[1].set_title(\"Evolution of Nominal ADR\")\n",
    "    ax[1].legend()\n",
    "    ax[1].grid(True)\n",
    "\n",
    "    plt.tight_layout()\n",
    "    return fig\n",
    "\n",
    "# Build the Streamlit interface\n",
    "st.title(\"Riyadh Hospitality Market\")\n",
    "st.subheader(\"2024-2034 Supply-Demand Dynamics\")\n",
    "\n",
    "# Input widgets\n",
    "demand_growth = st.slider(\"Demand Growth (%)\", 0.0, 25.0, 5.0) / 100.0\n",
    "inflation_rate = st.slider(\"Inflation (%)\", 1.0, 20.0, 2.0) / 100.0\n",
    "supply5_str = st.text_input(\"Supply 5\", \"860,1168,2408,4586,1945,481,490,0,0,0,384\")\n",
    "supply4_str = st.text_input(\"Supply 4\", \"417,1317,1281,1170,950,384,224,0,0,294,0\")\n",
    "\n",
    "if st.button(\"Run Simulation\"):\n",
    "    fig = simulate_market(demand_growth, inflation_rate, supply5_str, supply4_str)\n",
    "    if fig is not None:\n",
    "        st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4dcd4491",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
